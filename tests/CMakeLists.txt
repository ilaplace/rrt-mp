cmake_minimum_required(VERSION 3.0.0)
project(hash-real-data VERSION 0.1.0)

set(CMAKE_REQUIRED_FLAGS -std=c++17)
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall")
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
include(CTest)
enable_testing()
add_library(test_main OBJECT test_main.cpp)
include_directories(../)
add_executable(hashtest hashtest.cpp $<TARGET_OBJECTS:test_main>)
add_executable(loaddbtest loaddbtest.cpp $<TARGET_OBJECTS:test_main>)
add_executable(fliptest flipTest.cpp $<TARGET_OBJECTS:test_main>)
add_executable(test2 fileoptest.cpp $<TARGET_OBJECTS:test_main>)
add_executable(stateTest stateTest.cpp $<TARGET_OBJECTS:test_main>)
add_executable(timeTest stateTest.cpp $<TARGET_OBJECTS:test_main>)
add_executable(environmentTest environmentTest.cpp $<TARGET_OBJECTS:test_main>)
add_executable(performenceIterationTest performenceIterationTest.cpp $<TARGET_OBJECTS:test_main>)
add_executable(performenceCostSameRunTest performenceCostSameRunTest.cpp $<TARGET_OBJECTS:test_main>)


add_test(NAME test2 COMMAND test2)
add_test(NAME hashtest COMMAND hashtest)
add_test(NAME loaddbtest COMMAND loaddbtest)
add_test(NAME fliptest COMMAND fliptest)
add_test(NAME stateTest COMMAND fliptest)
add_test(NAME performenceIterationTest COMMAND performenceIterationTest)
add_test(NAME performenceCostSameRunTest COMMAND performenceCostSameRunTest)

add_test(NAME environmentTest COMMAND environmentTest)

find_package(ompl REQUIRED)
find_package (Eigen3 REQUIRED)
find_package(Boost 1.36.0 REQUIRED COMPONENTS serialization filesystem)
if(Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS})
endif()

include_directories(${OMPL_INCLUDE_DIRS})
include_directories(${EIGEN3_INCLUDE_DIR})


set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)

target_link_libraries(environmentTest ${OMPL_LIBRARIES} ${Boost_LIBRARIES} PrimitivePlanner)
target_link_libraries(performenceIterationTest ${OMPL_LIBRARIES} ${Boost_LIBRARIES} PrimitivePlanner)
target_link_libraries(test2 Boost::serialization PrimitivePlanner)
target_link_libraries(loaddbtest Boost::serialization PrimitivePlanner)
target_link_libraries(fliptest Boost::serialization PrimitivePlanner)
target_link_libraries(stateTest Boost::serialization ${OMPL_LIBRARIES} PrimitivePlanner )
target_link_libraries(performenceCostSameRunTest Boost::serialization ${Boost_LIBRARIES} ${OMPL_LIBRARIES} PrimitivePlanner )